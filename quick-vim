#!/bin/bash
set -e

help () {
    cat<<EOF

Usage: quick-vim [install|uninstall|upgrade|help]

Commands:
    
    install    installs from the git repo
    uninstall  restores original system vim config
    upgrade    clobbers existing setup and installs fresh from git
    help       print this msg

EOF
}

# backs default home vim up
backup () {
    if [ -e ./backup ]
    then 
        if [ -e ~/.vimrc ]
        then
            mv ~/.vimrc ./backup/.vimrc
        fi
        if [ -e ~/.vim ]
        then
            mv ~/.vim ./backup/.vim
        fi
        if [ -e ~/.vim_runtime ]
        then
            rm -rf ~/.vim_runtime
        fi
    else
        mkdir -p ./backup
        if [ -e ~/.vimrc ]
        then
            mv ~/.vimrc ./backup/.vimrc
        fi
        if [ -e ~/.vim ]
        then
            mv ~/.vim ./backup/.vim
        fi
        if [ -e ~/.vim_runtime ]
        then
            rm -rf ~/.vim_runtime
        fi
    fi
}

# copy in pathogen and then clone in bundles
install () {
    if [ -e ~/.vim_runtime ]
    then 
	backup
	git submodule update --recursive
	cp -a ./vimrc ~/.vim_runtime
	sh ~/.vim_runtime/install_awesome_vimrc.sh
    else
	git submodule update --recursive
	cp -a ./vimrc ~/.vim_runtime
	sh ~/.vim_runtime/install_awesome_vimrc.sh
    fi
}
# kills everything, pulls latest from git, installs it
upgrade () {
    uninstall
    git pull
    git submodule update --recursive    
    install
}
# if backup exists clobbers home vim and copies in backup
uninstall () {
        if [ -e ~/.vimrc ]
        then
		rm ~/.vimrc
	fi
        if [ -e ~/.vim ]
        then
		rm -rf ~/.vim
	fi
	if [ -e ./backup/.vimrc ]
        then
            mv ./backup/.vimrc ~/.vimrc
        fi
        if [ -e ./backup/.vim ]
        then
            mv ./backup/.vim ~/.vim
        fi
	    rm -rf ./backup
}

# fucking cryptic bash, test for a valid arg and execute it if so; otherwise show the help
if [ "$1" != "" ]; then
    wl=(install uninstall upgrade help)
    for i in "${wl[@]}"
    do
        if [ "$i" == "$1" ]
        then
            $1
            exit 0
        fi
    done
fi

# show a flailer some help
help 
exit 0
